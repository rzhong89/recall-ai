import genanki
import tempfile
import os
import logging
from typing import List, Dict, Any, Optional

logger = logging.getLogger(__name__)

class AnkiExporter:
    def __init__(self):
        # Define basic note model for flashcards
        self.basic_model = genanki.Model(
            1607392319,  # Unique model ID
            'FlashGen Basic',
            fields=[
                {'name': 'Front'},
                {'name': 'Back'},
                {'name': 'Source'},
            ],
            templates=[
                {
                    'name': 'Card 1',
                    'qfmt': '{{Front}}',
                    'afmt': '{{FrontSide}}<hr id="answer">{{Back}}<br><br><small>{{Source}}</small>',
                },
            ],
            css="""
.card {
    font-family: Arial, sans-serif;
    font-size: 20px;
    text-align: center;
    color: black;
    background-color: white;
    line-height: 1.4;
}

.front {
    font-size: 24px;
    font-weight: bold;
    margin-bottom: 20px;
}

.back {
    font-size: 20px;
    margin-bottom: 20px;
}

small {
    font-size: 12px;
    color: #666;
    font-style: italic;
}

hr {
    margin: 20px 0;
    border: 1px solid #ccc;
}
"""
        )
        
        # Define cloze deletion model
        self.cloze_model = genanki.Model(
            1607392320,  # Unique model ID
            'FlashGen Cloze',
            fields=[
                {'name': 'Text'},
                {'name': 'Extra'},
                {'name': 'Source'},
            ],
            templates=[
                {
                    'name': 'Cloze',
                    'qfmt': '{{cloze:Text}}',
                    'afmt': '{{cloze:Text}}<br>{{Extra}}<br><br><small>{{Source}}</small>',
                },
            ],
            model_type=genanki.Model.CLOZE,
            css="""
.card {
    font-family: Arial, sans-serif;
    font-size: 20px;
    text-align: center;
    color: black;
    background-color: white;
    line-height: 1.4;
}

.cloze {
    font-weight: bold;
    color: blue;
}

small {
    font-size: 12px;
    color: #666;
    font-style: italic;
}
"""
        )

    def convert_flashcard_to_anki_note(self, flashcard: Dict[str, Any]) -> genanki.Note:
        """Convert a flashcard dictionary to an Anki note"""
        
        card_type = flashcard.get('type', 'qa')
        question = flashcard.get('question', '')
        answer = flashcard.get('answer', '')
        source = flashcard.get('source_text', '')[:100] + '...' if flashcard.get('source_text', '') else 'Generated by FlashGen AI'
        
        if card_type == 'cloze':
            # Convert underscores to Anki cloze format
            cloze_text = question.replace('______', '{{c1::}}')
            # If no cloze deletions found, create one from the answer
            if '{{c1::' not in cloze_text:
                # Try to find the answer text in the question and make it a cloze
                if answer.lower() in question.lower():
                    cloze_text = question.replace(answer, f'{{{{c1::{answer}}}}}')
                else:
                    # Fallback: add answer as cloze at the end
                    cloze_text = f"{question} {{{{c1::{answer}}}}}"
            
            return genanki.Note(
                model=self.cloze_model,
                fields=[cloze_text, answer, source],
                tags=[flashcard.get('difficulty', 'medium'), 'flashgen']
            )
        else:
            # Basic Q&A card
            return genanki.Note(
                model=self.basic_model,
                fields=[question, answer, source],
                tags=[flashcard.get('difficulty', 'medium'), 'flashgen']
            )

    def create_anki_deck(self, flashcards: List[Dict[str, Any]], deck_name: str) -> str:
        """
        Create an Anki deck from flashcards and return the path to the .apkg file
        
        Args:
            flashcards: List of flashcard dictionaries
            deck_name: Name for the Anki deck
            
        Returns:
            Path to the generated .apkg file
        """
        try:
            logger.info(f"Creating Anki deck '{deck_name}' with {len(flashcards)} cards")
            
            # Create deck with unique integer ID
            # Convert deck name to a consistent integer ID
            import hashlib
            deck_hash = hashlib.md5(deck_name.encode()).hexdigest()
            deck_id = int(deck_hash[:8], 16)  # Use first 8 chars as hex, convert to int
            deck = genanki.Deck(deck_id, deck_name)
            
            # Convert flashcards to Anki notes and add to deck
            for i, flashcard in enumerate(flashcards):
                try:
                    note = self.convert_flashcard_to_anki_note(flashcard)
                    deck.add_note(note)
                except Exception as e:
                    logger.warning(f"Failed to convert flashcard {i}: {e}")
                    continue
            
            # Create temporary file for the package
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.apkg')
            temp_file.close()
            
            # Generate the package
            package = genanki.Package(deck)
            package.write_to_file(temp_file.name)
            
            logger.info(f"Successfully created Anki package: {temp_file.name}")
            return temp_file.name
            
        except Exception as e:
            logger.error(f"Error creating Anki deck: {e}")
            raise

    def cleanup_temp_file(self, file_path: str):
        """Clean up temporary file"""
        try:
            if os.path.exists(file_path):
                os.unlink(file_path)
                logger.info(f"Cleaned up temporary file: {file_path}")
        except Exception as e:
            logger.warning(f"Failed to cleanup temp file {file_path}: {e}")

    def health_check(self) -> Dict[str, Any]:
        """Check if genanki is working properly"""
        try:
            # Try creating a simple test deck
            test_deck = genanki.Deck(12345, "Test Deck")
            test_note = genanki.Note(
                model=self.basic_model,
                fields=['Test Question', 'Test Answer', 'Test Source']
            )
            test_deck.add_note(test_note)
            
            return {
                "status": "healthy",
                "library": "genanki",
                "models_available": ["FlashGen Basic", "FlashGen Cloze"]
            }
        except Exception as e:
            return {
                "status": "unhealthy",
                "library": "genanki",
                "error": str(e)
            }